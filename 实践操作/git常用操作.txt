如何上传本地仓库到git服务器


or create a new repository on the command line

echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:wangzkiss/test.git
git push -u origin master


…or push an existing repository from the command line

git remote add origin git@github.com:wangzkiss/test.git
git push -u origin master



删除提交日志


Q:我们在提交代码时，把密码或者敏感信息也提交了，怎么办？
A:“在本地删除密码或敏感信息后，再push到远程仓库”
Q:"但这样删除后，在仓库的commit历史中，还是能看到密码呀?"
A:“那就删除commit历史， 但是怎么删呢。。。。”
B:"Using filter-branch"
 

首先，
　　进入到本地目录，执行 git filter-branch, 强制( --force) git对所有分支和tag的历史记录(--tag-name-filter cat -- -all)执行命令,
    但是不需要check out(--index-filter)这些历史记录.
　　执行的命令是  从历史记录中删除指定文件(`git rm --cached --ignore-unmatch 文件名称`)的内容和空提交(--prune-empty)
    如果删除的是目录，需使用(`git rm -r --cached --ignore-unmatch 目录名称`) 
　　执行命令, 删除文件在本地的提交历史:
　　git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch 文件' --prune-empty --tag-name-filter cat -- --all
然后，
　　（可选）把文件名加入到.gitignore文件中， 以后提交时，会被过滤掉，防止以后不小心又把敏感数据提交到代码仓库中
　　echo 文件名 >> .gitignore
　　git add 文件名
　　git commit -m "提交时忽略xxxx文件"

最后，
　　将修改提交到远程仓库，远程仓库的commit历史将被修改
　　git push origin --force --all　　
　　如果tag中也需要删除敏感数据，则执行
　　git push origin  --force --tags
　　告诉同事， rebase 之前拉取的仓库,  不要merge, 因为merge后提交，会把之前清除的敏感文件又提交到仓库里。
    rebase 会先把本地提交的记录打补丁，然后把本地仓库更新成和远程相同，然后再应用补丁。
    merge 是合并， 本地已有的敏感数据还在，远端仓库没了。

　　

1.修改命令
git remote set-url origin [url]
例如：Git remote set-url origin gitlab@gitlab.chumob.com:PHP/hasoffer.git
2.先删后加
git remote rm origin
git remote add origin [url]



warning: push.default is unset; its implicit value is changing in Git 2.0 from 'matching' to 'simple'. 

To squelch this message and maintain the current behavior after the default changes, use:  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:  git config --global push.default simple



事实上这并不会影响你push的结果，最终push还会成功，因为这只是一个”warning“
你可以按照他说的那样运行：git config --global push.default matching或者git config --global push.default simple命令，以后再push就不会有警告了。

下面说一下push.default matching和push.default simple的区别：
push.default设置maching的意思是：git push 会把你本地所有分支push到名称相对应的远程主机上。这意味着可能你会在不经意间push一些你原本没打算push的分支。
push.default设置成simple的意思是：git push仅仅把当前所在分支push到从当初git pull pull下来的那个对应分支上，另外，这个过程也会同时检查各个分支的名称是否相对应。